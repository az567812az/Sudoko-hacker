#include <bits/stdc++.h>
using namespace std;
//數獨長寬大小
#define Maxsize 9  	

vector<int> Row_Allow_Num[Maxsize];
vector<int> Col_Allow_Num[Maxsize];
vector<int> Block_Allow_Num[Maxsize];

int Matrix [Maxsize][Maxsize];

int Find_witchblock(int row, int col)
{
	row = row/3*3;
	col = col/3;
	return row+col;
}

void init_Block_Allow()
{
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=1;j<=Maxsize;j++)
		{
			Block_Allow_Num[i].push_back(j);
		}
	}
}

void Check_allownum()
{
	bool check[Maxsize+1];
	for(int i=0;i<Maxsize;i++)
	{
		memset(check,0,sizeof(check));
		for(int j=0;j<Maxsize;j++)
		{
			int val = Matrix[i][j];
			check[val] = true;
		}	
		for(int k=1;k<=Maxsize;k++)
		{
			if(!check[k])
			{
				Row_Allow_Num[i].push_back(k);
			}
		}
	}

	memset(check,0,sizeof(check));
	for(int j=0;j<Maxsize;j++)
	{
		memset(check,0,sizeof(check));
		for(int i=0;i<Maxsize;i++)
		{
			int val = Matrix[i][j];
			check[val] = true;
		}
		for(int k=1;k<=Maxsize;k++)
		{
			if(!check[k])
			{
				Col_Allow_Num[j].push_back(k);
			}
		}
	}

	init_Block_Allow();
	
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=0;j<Maxsize;j++)
		{
			int index = Find_witchblock(i,j);
			int val = Matrix[i][j];
			if(val == 0) continue;
			vector<int>::iterator it;
			it =  find(Block_Allow_Num[index].begin(),Block_Allow_Num[index].end(),val);
			Block_Allow_Num[index].erase(it);
		}
	}

}
//將數獨結果印出來
void Print_it_out()
{
	cout<<"*****************\n";
		for(int i=0;i<Maxsize;i++)
		{
			for(int j=0;j<Maxsize;j++)
			{
				cout<<Matrix[i][j]<<" ";
			}
			cout<<"\n";
		}
	cout<<"*****************\n";
}

void init_Matrix()
{
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=0;j<Maxsize;j++)
		{
			cin>>Matrix[i][j];
		}
	}
}
//判斷待處理空格 
int Find_empty_block(vector<int> &Empty_row, vector<int> &Empty_col)
{
	int pendnum = 0;
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=0;j<Maxsize;j++)
		{
			if( !Matrix[i][j] )
			{
				pendnum++;
				Empty_row.push_back(i);
				Empty_col.push_back(j); 
			}
		}
	}
	return pendnum;
}

vector<int> Find_intersection (int row, int col ,int block )
{
	bool R[Maxsize+1];
	bool C[Maxsize+1];
	bool B[Maxsize+1];
	memset(R,0,sizeof(R));
	memset(C,0,sizeof(C));
	memset(B,0,sizeof(B));
	vector<int> tmp;
	
	for(int i=0;i<Row_Allow_Num[row].size();i++)
		R[Row_Allow_Num[row][i]] = true;
/*	for(auto val:R)
		cout<<val<<" ";
	cout<<"\n";*/
	for(int i=0;i<Col_Allow_Num[col].size();i++)
		C[Col_Allow_Num[col][i]] = true;
/*	for(auto val:C)
		cout<<val<<" ";
	cout<<"\n";*/
	for(int i=0;i<Block_Allow_Num[block].size();i++)
		B[Block_Allow_Num[block][i]] = true;
/*	for(auto val:B)
		cout<<val<<" ";
	cout<<"\n";*/
	for(int i=1;i<=Maxsize;i++)
	{
		if(R[i] && C[i] && B[i])
			tmp.push_back(i);
	}
	return tmp;
}

void DFS(int currnum, int Pendnum, vector<int> & Rowlist, vector<int> & Collist)
{
	if(currnum == Pendnum)
	{
		Print_it_out();
		return;
	}
	int row = Rowlist[currnum];
	int col = Collist[currnum];
	int block = Find_witchblock(row,col);
	vector<int> Possible_value = Find_intersection(row,col,block);
/*	for(int i=0;i<Possible_value.size();i++) 
		cout<<Possible_value[i]<<" ";
	cout<<"\n";*/
	for(int i=0;i<Possible_value.size();i++)
	{
		int val = Possible_value[i];
		vector<int>:: iterator it;
		it = find(Row_Allow_Num[row].begin(),Row_Allow_Num[row].end(),val);
		Row_Allow_Num[row].erase(it);
		it = find(Col_Allow_Num[col].begin(),Col_Allow_Num[col].end(),val);
		Col_Allow_Num[col].erase(it);
		it = find(Block_Allow_Num[block].begin(),Block_Allow_Num[block].end(),val);
		Block_Allow_Num[block].erase(it);
		Matrix[row][col] = val;
		DFS(currnum+1,Pendnum,Rowlist,Collist);
		Matrix[row][col] = 0;
		Row_Allow_Num[row].push_back(val);
		Col_Allow_Num[col].push_back(val);
		Block_Allow_Num[block].push_back(val);
	}
}

int main()
{
	memset(Matrix,0,sizeof(Matrix));
	int pending_dataNum;
	cout<<"****Please input your Sudoko problems--->\n";
//	寫入格式 
	init_Matrix();
	Check_allownum();
	vector<int> Empty_row;
	vector<int> Empty_col;
	pending_dataNum = Find_empty_block(Empty_row,Empty_col);
	DFS(0,pending_dataNum,Empty_row,Empty_col);
/*	cout<<"ROW\n";
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=0;j<Row_Allow_Num[i].size();j++)
		{
			cout<<Row_Allow_Num[i][j]<<" ";
		}
		cout<<"\n";
	}
	cout<<"COL\n";
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=0;j<Col_Allow_Num[i].size();j++)
		{
			cout<<Col_Allow_Num[i][j]<<" ";
		}
		cout<<"\n";
	}
	cout<<"BLOCK\n";
	for(int i=0;i<Maxsize;i++)
	{
		for(int j=0;j<Block_Allow_Num[i].size();j++)
		{
			cout<<Block_Allow_Num[i][j]<<" ";
		}
		cout<<"\n";
	}*/
	return 0;
} 
